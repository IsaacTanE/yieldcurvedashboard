import streamlit as st
import pandas as pd
import plotly.graph_objects as go

# --- Load data from two sheets ---
df_fx = pd.read_excel("fx_swap_live.xlsm", sheet_name="Live Curve FX")
df_sora = pd.read_excel("fx_swap_live.xlsm", sheet_name="Live Curve SORA")

# --- Common preprocessing ---
for df in [df_fx, df_sora]:
    df['Timestamp'] = pd.to_datetime(df['Timestamp'])
    df['Date'] = df['Timestamp'].dt.date

# Tenor columns (assumed same structure)
tenor_cols = [col for col in df_fx.columns if col.endswith("M")]

# --- Sidebar controls ---
with st.sidebar:
    st.markdown("### üìÖ Select Date")
    all_dates = sorted(df_fx['Date'].unique())
    selected_date = st.selectbox("Select a date", options=all_dates, index=len(all_dates) - 1)
    live_mode = st.checkbox("üîÑ View latest snapshot", value=True)

    st.markdown("### üîÅ Overlay")
    show_opening_overlay = st.checkbox("Compare with opening curve(s)", value=True)

    st.markdown("### üéõÔ∏è Y-Axis Settings")
    y_min = st.number_input("Y-axis min", value=3.0)
    y_max = st.number_input("Y-axis max", value=5.0)
    use_log = st.checkbox("Log scale", value=False)

# --- Filter selected date ---
df_fx_day = df_fx[df_fx['Date'] == selected_date]
df_sora_day = df_sora[df_sora['Date'] == selected_date]

# --- Select timestamp ---
if live_mode:
    selected_time = df_fx_day['Timestamp'].max()
else:
    available_times = sorted(df_fx_day['Timestamp'].unique())
    selected_time = st.select_slider(
        "Select Time",
        options=available_times,
        value=available_times[-1],
        format_func=lambda x: x.strftime('%H:%M')
    )

# --- Get selected rows ---
selected_fx = df_fx_day[df_fx_day['Timestamp'] == selected_time].iloc[0]
selected_sora = df_sora_day[df_sora_day['Timestamp'] == selected_time].iloc[0]

# --- Start building chart ---
fig = go.Figure()

# --- Plot sora_fx (main live curve) ---
fig.add_trace(go.Scatter(
    x=tenor_cols,
    y=selected_fx[tenor_cols],
    mode='lines+markers',
    name=f"sora_fx @ {selected_time.strftime('%H:%M')}",
    line=dict(width=4),
    marker=dict(size=8)
))

# --- Plot sora (other curve) ---
fig.add_trace(go.Scatter(
    x=tenor_cols,
    y=selected_sora[tenor_cols],
    mode='lines+markers',
    name=f"sora @ {selected_time.strftime('%H:%M')}",
    line=dict(width=3, dash='dot', color='blue'),
    marker=dict(size=6)
))

# --- Plot opening overlays with bps deltas ---
if show_opening_overlay:
    # Opening for sora_fx
    opening_fx = df_fx_day.sort_values("Timestamp").iloc[0]
    delta_bps_fx = (selected_fx[tenor_cols].values - opening_fx[tenor_cols].values) * 100
    fig.add_trace(go.Scatter(
        x=tenor_cols,
        y=opening_fx[tenor_cols],
        mode='lines+markers',
        name="Opening (sora_fx)",
        line=dict(width=2, dash='dash', color='gray'),
        marker=dict(size=5),
        customdata=delta_bps_fx.reshape(-1, 1),
        hovertemplate=(
            'Tenor: %{x}<br>' +
            'Yield: %{y:.2f}%<br>' +
            'Change vs selected: %{customdata[0]:+.1f} bps<extra></extra>'
        )
    ))

    # Opening for sora
    opening_sora = df_sora_day.sort_values("Timestamp").iloc[0]
    delta_bps_sora = (selected_sora[tenor_cols].values - opening_sora[tenor_cols].values) * 100
    fig.add_trace(go.Scatter(
        x=tenor_cols,
        y=opening_sora[tenor_cols],
        mode='lines+markers',
        name="Opening (sora)",
        line=dict(width=2, dash='dashdot', color='lightblue'),
        marker=dict(size=5),
        customdata=delta_bps_sora.reshape(-1, 1),
        hovertemplate=(
            'Tenor: %{x}<br>' +
            'Yield: %{y:.2f}%<br>' +
            'Change vs selected: %{customdata[0]:+.1f} bps<extra></extra>'
        )
    ))

# --- Layout formatting ---
fig.update_layout(
    title=f"Implied SGD Yield Curve ‚Äî {selected_date} @ {selected_time.strftime('%H:%M')}",
    xaxis_title="Tenor",
    yaxis_title="Implied SORA (%)",
    hovermode="x unified",
    width=700,
    height=600,
    font=dict(size=16),
    margin=dict(t=50, l=60, r=40, b=60),
    legend=dict(
        x=1,
        y=1,
        xanchor='right',
        yanchor='top',
        bgcolor='rgba(255,255,255,0.8)',
        bordercolor='black',
        borderwidth=1,
        font=dict(size=14)
    )
)

fig.update_xaxes(
    title_font=dict(size=18),
    tickfont=dict(size=14)
)

fig.update_yaxes(
    title_font=dict(size=18),
    tickfont=dict(size=14),
    range=[y_min, y_max],
    type='log' if use_log else 'linear'
)

# --- Display chart ---
st.plotly_chart(fig, use_container_width=True)